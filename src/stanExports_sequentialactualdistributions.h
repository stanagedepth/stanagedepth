// Generated by rstantools.  Do not edit by hand.

/*
    stanagedepth is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    stanagedepth is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with stanagedepth.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_sequentialactualdistributions_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 64, column 2 to column 31)",
                                                      " (in 'string', line 67, column 2 to column 34)",
                                                      " (in 'string', line 69, column 4 to column 53)",
                                                      " (in 'string', line 68, column 24 to line 70, column 3)",
                                                      " (in 'string', line 68, column 2 to line 70, column 3)",
                                                      " (in 'string', line 52, column 2 to column 25)",
                                                      " (in 'string', line 53, column 2 to column 25)",
                                                      " (in 'string', line 54, column 25 to column 34)",
                                                      " (in 'string', line 54, column 9 to column 18)",
                                                      " (in 'string', line 54, column 2 to column 36)",
                                                      " (in 'string', line 55, column 26 to column 35)",
                                                      " (in 'string', line 55, column 9 to column 18)",
                                                      " (in 'string', line 55, column 2 to column 37)",
                                                      " (in 'string', line 58, column 2 to column 19)",
                                                      " (in 'string', line 60, column 30 to column 51)",
                                                      " (in 'string', line 60, column 4 to column 51)",
                                                      " (in 'string', line 59, column 24 to line 61, column 3)",
                                                      " (in 'string', line 59, column 2 to line 61, column 3)",
                                                      " (in 'string', line 64, column 10 to column 19)",
                                                      " (in 'string', line 8, column 4 to column 18)",
                                                      " (in 'string', line 9, column 4 to column 35)",
                                                      " (in 'string', line 10, column 4 to column 44)",
                                                      " (in 'string', line 11, column 4 to column 22)",
                                                      " (in 'string', line 13, column 4 to column 18)",
                                                      " (in 'string', line 14, column 4 to column 19)",
                                                      " (in 'string', line 15, column 4 to column 25)",
                                                      " (in 'string', line 17, column 58 to column 144)",
                                                      " (in 'string', line 17, column 4 to column 144)",
                                                      " (in 'string', line 32, column 10 to column 24)",
                                                      " (in 'string', line 31, column 15 to line 33, column 9)",
                                                      " (in 'string', line 30, column 10 to column 24)",
                                                      " (in 'string', line 29, column 38 to line 31, column 9)",
                                                      " (in 'string', line 29, column 15 to line 33, column 9)",
                                                      " (in 'string', line 27, column 10 to column 24)",
                                                      " (in 'string', line 28, column 10 to column 24)",
                                                      " (in 'string', line 26, column 31 to line 29, column 9)",
                                                      " (in 'string', line 26, column 8 to line 33, column 9)",
                                                      " (in 'string', line 34, column 50 to column 56)",
                                                      " (in 'string', line 34, column 8 to column 56)",
                                                      " (in 'string', line 35, column 8 to column 44)",
                                                      " (in 'string', line 36, column 8 to column 34)",
                                                      " (in 'string', line 25, column 18 to line 37, column 7)",
                                                      " (in 'string', line 25, column 6 to line 37, column 7)",
                                                      " (in 'string', line 24, column 11 to line 38, column 5)",
                                                      " (in 'string', line 23, column 6 to column 20)",
                                                      " (in 'string', line 22, column 34 to line 24, column 5)",
                                                      " (in 'string', line 22, column 11 to line 38, column 5)",
                                                      " (in 'string', line 21, column 6 to column 20)",
                                                      " (in 'string', line 20, column 26 to line 22, column 5)",
                                                      " (in 'string', line 20, column 4 to line 38, column 5)",
                                                      " (in 'string', line 43, column 6 to column 74)",
                                                      " (in 'string', line 44, column 6 to column 85)",
                                                      " (in 'string', line 45, column 6 to column 104)",
                                                      " (in 'string', line 42, column 11 to line 46, column 5)",
                                                      " (in 'string', line 40, column 6 to column 29)",
                                                      " (in 'string', line 41, column 6 to column 39)",
                                                      " (in 'string', line 39, column 23 to line 42, column 5)",
                                                      " (in 'string', line 39, column 4 to line 46, column 5)",
                                                      " (in 'string', line 48, column 4 to column 26)",
                                                      " (in 'string', line 3, column 82 to line 49, column 3)"};
template <bool propto__, typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, stan::value_type_t<T1__>,
stan::value_type_t<T2__>>
calibrated_age_lpdf(const T0__& age, const T1__& ages_arg__,
                    const T2__& probabilities_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>>;
  const auto& ages = to_ref(ages_arg__);
  const auto& probabilities = to_ref(probabilities_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int lower;
    lower = std::numeric_limits<int>::min();
    
    current_statement__ = 20;
    lower = 1;
    int upper;
    upper = std::numeric_limits<int>::min();
    
    current_statement__ = 21;
    upper = num_elements(ages);
    int index;
    index = std::numeric_limits<int>::min();
    
    current_statement__ = 22;
    index = (lower + ((upper - lower) / 2));
    int iteration;
    iteration = std::numeric_limits<int>::min();
    
    current_statement__ = 23;
    iteration = 0;
    local_scalar_t__ used_age;
    used_age = DUMMY_VAR__;
    
    local_scalar_t__ used_prob;
    used_prob = DUMMY_VAR__;
    
    local_scalar_t__ interp_fraction;
    interp_fraction = DUMMY_VAR__;
    
    current_statement__ = 28;
    if (logical_neq(num_elements(ages), num_elements(probabilities))) {
      current_statement__ = 27;
      std::stringstream errmsg_stream__;
      errmsg_stream__ << "Number of elements in ages and probabilities unequal in calibrated_age_lpdf";
      throw std::domain_error(errmsg_stream__.str());
    } 
    current_statement__ = 50;
    if (logical_gt(ages[(lower - 1)], age)) {
      current_statement__ = 48;
      upper = lower;
    } else {
      current_statement__ = 47;
      if (logical_lt(ages[(upper - 1)], age)) {
        current_statement__ = 45;
        lower = upper;
      } else {
        current_statement__ = 43;
        while (logical_eq(1, 1)) {
          current_statement__ = 37;
          if (logical_eq(ages[(index - 1)], age)) {
            current_statement__ = 34;
            lower = index;
            current_statement__ = 35;
            upper = index;
          } else {
            current_statement__ = 33;
            if (logical_lt(ages[(index - 1)], age)) {
              current_statement__ = 31;
              lower = index;
            } else {
              current_statement__ = 29;
              upper = index;
            }
          }
          current_statement__ = 39;
          if ((primitive_value(logical_lte((upper - lower), 1)) ||
              primitive_value(logical_gt(iteration, 50)))) {
            break;
          } 
          current_statement__ = 40;
          index = (lower + ((upper - lower) / 2));
          current_statement__ = 41;
          iteration = (iteration + 1);
        }
      }
    }
    current_statement__ = 58;
    if (logical_eq(upper, lower)) {
      current_statement__ = 55;
      used_age = ages[(lower - 1)];
      current_statement__ = 56;
      used_prob = probabilities[(lower - 1)];
    } else {
      current_statement__ = 51;
      interp_fraction = ((age - ages[(lower - 1)]) /
                          (ages[(upper - 1)] - ages[(lower - 1)]));
      current_statement__ = 52;
      used_age = (((1 - interp_fraction) * ages[(lower - 1)]) +
                   (interp_fraction * ages[(upper - 1)]));
      current_statement__ = 53;
      used_prob = (((1 - interp_fraction) * probabilities[(lower - 1)]) +
                    (interp_fraction * probabilities[(upper - 1)]));
    }
    current_statement__ = 59;
    return stan::math::log(used_prob);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct calibrated_age_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, stan::value_type_t<T1__>,
stan::value_type_t<T2__>>
operator()(const T0__& age, const T1__& ages, const T2__& probabilities,
           std::ostream* pstream__)  const 
{
return calibrated_age_lpdf<propto__>(age, ages, probabilities, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_sequentialactualdistributions final : public model_base_crtp<model_sequentialactualdistributions> {
private:
  int num_dates;
  int num_probs;
  std::vector<Eigen::Matrix<double, -1, 1>> ages;
  std::vector<Eigen::Matrix<double, -1, 1>> probs;
  double max_age;
 
public:
  ~model_sequentialactualdistributions() { }
  
  inline std::string model_name() const final { return "model_sequentialactualdistributions"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_sequentialactualdistributions(stan::io::var_context& context__,
                                      unsigned int random_seed__ = 0,
                                      std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_sequentialactualdistributions_namespace::model_sequentialactualdistributions";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 6;
      context__.validate_dims("data initialization","num_dates","int",
          context__.to_vec());
      num_dates = std::numeric_limits<int>::min();
      
      current_statement__ = 6;
      num_dates = context__.vals_i("num_dates")[(1 - 1)];
      current_statement__ = 6;
      current_statement__ = 6;
      check_greater_or_equal(function__, "num_dates", num_dates, 1);
      current_statement__ = 7;
      context__.validate_dims("data initialization","num_probs","int",
          context__.to_vec());
      num_probs = std::numeric_limits<int>::min();
      
      current_statement__ = 7;
      num_probs = context__.vals_i("num_probs")[(1 - 1)];
      current_statement__ = 7;
      current_statement__ = 7;
      check_greater_or_equal(function__, "num_probs", num_probs, 1);
      current_statement__ = 8;
      validate_non_negative_index("ages", "num_dates", num_dates);
      current_statement__ = 9;
      validate_non_negative_index("ages", "num_probs", num_probs);
      current_statement__ = 10;
      context__.validate_dims("data initialization","ages","double",
          context__.to_vec(num_dates, num_probs));
      ages = std::vector<Eigen::Matrix<double, -1, 1>>(num_dates, Eigen::Matrix<double, -1, 1>(num_probs));
      stan::math::fill(ages, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> ages_flat__;
        current_statement__ = 10;
        assign(ages_flat__, nil_index_list(), context__.vals_r("ages"),
          "assigning variable ages_flat__");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= num_probs; ++sym1__) {
          current_statement__ = 10;
          for (int sym2__ = 1; sym2__ <= num_dates; ++sym2__) {
            current_statement__ = 10;
            assign(ages,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              ages_flat__[(pos__ - 1)], "assigning variable ages");
            current_statement__ = 10;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 11;
      validate_non_negative_index("probs", "num_dates", num_dates);
      current_statement__ = 12;
      validate_non_negative_index("probs", "num_probs", num_probs);
      current_statement__ = 13;
      context__.validate_dims("data initialization","probs","double",
          context__.to_vec(num_dates, num_probs));
      probs = std::vector<Eigen::Matrix<double, -1, 1>>(num_dates, Eigen::Matrix<double, -1, 1>(num_probs));
      stan::math::fill(probs, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> probs_flat__;
        current_statement__ = 13;
        assign(probs_flat__, nil_index_list(), context__.vals_r("probs"),
          "assigning variable probs_flat__");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= num_probs; ++sym1__) {
          current_statement__ = 13;
          for (int sym2__ = 1; sym2__ <= num_dates; ++sym2__) {
            current_statement__ = 13;
            assign(probs,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              probs_flat__[(pos__ - 1)], "assigning variable probs");
            current_statement__ = 13;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 14;
      max_age = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      max_age = 0;
      current_statement__ = 18;
      for (int i = 1; i <= num_dates; ++i) {
        current_statement__ = 16;
        if (logical_lt(max_age, max(ages[(i - 1)]))) {
          current_statement__ = 15;
          max_age = max(ages[(i - 1)]);
        } }
      current_statement__ = 19;
      validate_non_negative_index("true_ages", "num_dates", num_dates);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += num_dates;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_sequentialactualdistributions_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> true_ages;
      true_ages = Eigen::Matrix<local_scalar_t__, -1, 1>(num_dates);
      stan::math::fill(true_ages, DUMMY_VAR__);
      
      current_statement__ = 1;
      true_ages = in__.vector(num_dates);
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        assign(true_ages, nil_index_list(),
          stan::math::ordered_constrain(true_ages, lp__),
          "assigning variable true_ages");
      } else {
        current_statement__ = 1;
        assign(true_ages, nil_index_list(),
          stan::math::ordered_constrain(true_ages),
          "assigning variable true_ages");
      }
      {
        current_statement__ = 2;
        lp_accum__.add(uniform_lpdf<propto__>(true_ages, 0, max_age));
        current_statement__ = 5;
        for (int i = 1; i <= num_dates; ++i) {
          current_statement__ = 3;
          lp_accum__.add(
            calibrated_age_lpdf<propto__>(true_ages[(i - 1)], ages[(i - 1)],
              probs[(i - 1)], pstream__));}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_sequentialactualdistributions_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> true_ages;
      true_ages = Eigen::Matrix<double, -1, 1>(num_dates);
      stan::math::fill(true_ages, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      true_ages = in__.vector(num_dates);
      current_statement__ = 1;
      assign(true_ages, nil_index_list(),
        stan::math::ordered_constrain(true_ages),
        "assigning variable true_ages");
      for (int sym1__ = 1; sym1__ <= num_dates; ++sym1__) {
        vars__.emplace_back(true_ages[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> true_ages;
      true_ages = Eigen::Matrix<double, -1, 1>(num_dates);
      stan::math::fill(true_ages, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> true_ages_flat__;
        current_statement__ = 1;
        assign(true_ages_flat__, nil_index_list(),
          context__.vals_r("true_ages"),
          "assigning variable true_ages_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= num_dates; ++sym1__) {
          current_statement__ = 1;
          assign(true_ages, cons_list(index_uni(sym1__), nil_index_list()),
            true_ages_flat__[(pos__ - 1)], "assigning variable true_ages");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> true_ages_free__;
      true_ages_free__ = Eigen::Matrix<double, -1, 1>(num_dates);
      stan::math::fill(true_ages_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      assign(true_ages_free__, nil_index_list(),
        stan::math::ordered_free(true_ages),
        "assigning variable true_ages_free__");
      for (int sym1__ = 1; sym1__ <= num_dates; ++sym1__) {
        vars__.emplace_back(true_ages_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("true_ages");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(num_dates)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= num_dates; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "true_ages" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= num_dates; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "true_ages" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"true_ages\",\"type\":{\"name\":\"vector\",\"length\":" << num_dates << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"true_ages\",\"type\":{\"name\":\"vector\",\"length\":" << num_dates << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_sequentialactualdistributions_namespace::model_sequentialactualdistributions;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_sequentialactualdistributions_namespace::profiles__;
}
#endif
#endif
