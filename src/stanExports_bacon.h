// Generated by rstantools.  Do not edit by hand.

/*
    stanagedepth is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    stanagedepth is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with stanagedepth.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_bacon_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 20, column 2 to column 32)",
                                                      " (in 'string', line 21, column 2 to column 42)",
                                                      " (in 'string', line 22, column 2 to column 24)",
                                                      " (in 'string', line 25, column 2 to column 42)",
                                                      " (in 'string', line 26, column 2 to column 52)",
                                                      " (in 'string', line 27, column 2 to column 45)",
                                                      " (in 'string', line 28, column 2 to column 22)",
                                                      " (in 'string', line 30, column 4 to column 59)",
                                                      " (in 'string', line 29, column 31 to line 31, column 3)",
                                                      " (in 'string', line 29, column 2 to line 31, column 3)",
                                                      " (in 'string', line 33, column 2 to column 29)",
                                                      " (in 'string', line 35, column 4 to column 31)",
                                                      " (in 'string', line 37, column 6 to column 54)",
                                                      " (in 'string', line 36, column 22 to line 38, column 5)",
                                                      " (in 'string', line 36, column 4 to line 38, column 5)",
                                                      " (in 'string', line 34, column 33 to line 39, column 3)",
                                                      " (in 'string', line 34, column 2 to line 39, column 3)",
                                                      " (in 'string', line 41, column 4 to column 35)",
                                                      " (in 'string', line 46, column 8 to column 81)",
                                                      " (in 'string', line 47, column 8 to column 14)",
                                                      " (in 'string', line 45, column 13 to line 48, column 7)",
                                                      " (in 'string', line 44, column 8 to column 62)",
                                                      " (in 'string', line 43, column 43 to line 45, column 7)",
                                                      " (in 'string', line 43, column 6 to line 48, column 7)",
                                                      " (in 'string', line 42, column 37 to line 49, column 5)",
                                                      " (in 'string', line 42, column 4 to line 49, column 5)",
                                                      " (in 'string', line 40, column 22 to line 50, column 3)",
                                                      " (in 'string', line 40, column 2 to line 50, column 3)",
                                                      " (in 'string', line 57, column 4 to column 91)",
                                                      " (in 'string', line 56, column 9 to line 58, column 3)",
                                                      " (in 'string', line 55, column 4 to column 82)",
                                                      " (in 'string', line 54, column 20 to line 56, column 3)",
                                                      " (in 'string', line 54, column 2 to line 58, column 3)",
                                                      " (in 'string', line 59, column 2 to column 43)",
                                                      " (in 'string', line 60, column 2 to column 26)",
                                                      " (in 'string', line 61, column 2 to column 54)",
                                                      " (in 'string', line 2, column 2 to column 23)",
                                                      " (in 'string', line 3, column 9 to column 16)",
                                                      " (in 'string', line 3, column 2 to column 29)",
                                                      " (in 'string', line 4, column 9 to column 16)",
                                                      " (in 'string', line 4, column 2 to column 27)",
                                                      " (in 'string', line 5, column 9 to column 16)",
                                                      " (in 'string', line 5, column 2 to column 25)",
                                                      " (in 'string', line 7, column 2 to column 32)",
                                                      " (in 'string', line 8, column 9 to column 27)",
                                                      " (in 'string', line 8, column 2 to column 42)",
                                                      " (in 'string', line 9, column 2 to column 24)",
                                                      " (in 'string', line 10, column 2 to column 34)",
                                                      " (in 'string', line 12, column 2 to column 15)",
                                                      " (in 'string', line 13, column 2 to column 15)",
                                                      " (in 'string', line 14, column 2 to column 11)",
                                                      " (in 'string', line 15, column 2 to column 11)",
                                                      " (in 'string', line 17, column 2 to column 20)",
                                                      " (in 'string', line 21, column 18 to column 34)",
                                                      " (in 'string', line 25, column 18 to column 34)",
                                                      " (in 'string', line 26, column 18 to column 36)",
                                                      " (in 'string', line 27, column 18 to column 25)"};
#include <stan_meta_header.hpp>
class model_bacon final : public model_base_crtp<model_bacon> {
private:
  int numdets;
  Eigen::Matrix<double, -1, 1> det_depths;
  Eigen::Matrix<double, -1, 1> det_ages;
  Eigen::Matrix<double, -1, 1> det_sd;
  int nummodelledrates;
  Eigen::Matrix<double, -1, 1> model_depths;
  double depth_difference;
  int use_normal;
  double a_alpha;
  double b_alpha;
  double a_w;
  double b_w;
  int t_df;
  int modelled_ages_1dim__;
 
public:
  ~model_bacon() { }
  
  inline std::string model_name() const final { return "model_bacon"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_bacon(stan::io::var_context& context__,
              unsigned int random_seed__ = 0,
              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_bacon_namespace::model_bacon";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 37;
      context__.validate_dims("data initialization","numdets","int",
          context__.to_vec());
      numdets = std::numeric_limits<int>::min();
      
      current_statement__ = 37;
      numdets = context__.vals_i("numdets")[(1 - 1)];
      current_statement__ = 37;
      current_statement__ = 37;
      check_greater_or_equal(function__, "numdets", numdets, 1);
      current_statement__ = 38;
      validate_non_negative_index("det_depths", "numdets", numdets);
      current_statement__ = 39;
      context__.validate_dims("data initialization","det_depths","double",
          context__.to_vec(numdets));
      det_depths = Eigen::Matrix<double, -1, 1>(numdets);
      stan::math::fill(det_depths, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> det_depths_flat__;
        current_statement__ = 39;
        assign(det_depths_flat__, nil_index_list(),
          context__.vals_r("det_depths"),
          "assigning variable det_depths_flat__");
        current_statement__ = 39;
        pos__ = 1;
        current_statement__ = 39;
        for (int sym1__ = 1; sym1__ <= numdets; ++sym1__) {
          current_statement__ = 39;
          assign(det_depths, cons_list(index_uni(sym1__), nil_index_list()),
            det_depths_flat__[(pos__ - 1)], "assigning variable det_depths");
          current_statement__ = 39;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 40;
      validate_non_negative_index("det_ages", "numdets", numdets);
      current_statement__ = 41;
      context__.validate_dims("data initialization","det_ages","double",
          context__.to_vec(numdets));
      det_ages = Eigen::Matrix<double, -1, 1>(numdets);
      stan::math::fill(det_ages, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> det_ages_flat__;
        current_statement__ = 41;
        assign(det_ages_flat__, nil_index_list(),
          context__.vals_r("det_ages"), "assigning variable det_ages_flat__");
        current_statement__ = 41;
        pos__ = 1;
        current_statement__ = 41;
        for (int sym1__ = 1; sym1__ <= numdets; ++sym1__) {
          current_statement__ = 41;
          assign(det_ages, cons_list(index_uni(sym1__), nil_index_list()),
            det_ages_flat__[(pos__ - 1)], "assigning variable det_ages");
          current_statement__ = 41;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 42;
      validate_non_negative_index("det_sd", "numdets", numdets);
      current_statement__ = 43;
      context__.validate_dims("data initialization","det_sd","double",
          context__.to_vec(numdets));
      det_sd = Eigen::Matrix<double, -1, 1>(numdets);
      stan::math::fill(det_sd, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> det_sd_flat__;
        current_statement__ = 43;
        assign(det_sd_flat__, nil_index_list(), context__.vals_r("det_sd"),
          "assigning variable det_sd_flat__");
        current_statement__ = 43;
        pos__ = 1;
        current_statement__ = 43;
        for (int sym1__ = 1; sym1__ <= numdets; ++sym1__) {
          current_statement__ = 43;
          assign(det_sd, cons_list(index_uni(sym1__), nil_index_list()),
            det_sd_flat__[(pos__ - 1)], "assigning variable det_sd");
          current_statement__ = 43;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 44;
      context__.validate_dims("data initialization","nummodelledrates","int",
          context__.to_vec());
      nummodelledrates = std::numeric_limits<int>::min();
      
      current_statement__ = 44;
      nummodelledrates = context__.vals_i("nummodelledrates")[(1 - 1)];
      current_statement__ = 44;
      current_statement__ = 44;
      check_greater_or_equal(function__, "nummodelledrates",
                             nummodelledrates, 1);
      current_statement__ = 45;
      validate_non_negative_index("model_depths", "nummodelledrates + 1",
                                  (nummodelledrates + 1));
      current_statement__ = 46;
      context__.validate_dims("data initialization","model_depths","double",
          context__.to_vec((nummodelledrates + 1)));
      model_depths = Eigen::Matrix<double, -1, 1>((nummodelledrates + 1));
      stan::math::fill(model_depths, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> model_depths_flat__;
        current_statement__ = 46;
        assign(model_depths_flat__, nil_index_list(),
          context__.vals_r("model_depths"),
          "assigning variable model_depths_flat__");
        current_statement__ = 46;
        pos__ = 1;
        current_statement__ = 46;
        for (int sym1__ = 1; sym1__ <= (nummodelledrates + 1); ++sym1__) {
          current_statement__ = 46;
          assign(model_depths,
            cons_list(index_uni(sym1__), nil_index_list()),
            model_depths_flat__[(pos__ - 1)],
            "assigning variable model_depths");
          current_statement__ = 46;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 47;
      context__.validate_dims("data initialization","depth_difference",
          "double",context__.to_vec());
      depth_difference = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 47;
      depth_difference = context__.vals_r("depth_difference")[(1 - 1)];
      current_statement__ = 48;
      context__.validate_dims("data initialization","use_normal","int",
          context__.to_vec());
      use_normal = std::numeric_limits<int>::min();
      
      current_statement__ = 48;
      use_normal = context__.vals_i("use_normal")[(1 - 1)];
      current_statement__ = 48;
      current_statement__ = 48;
      check_greater_or_equal(function__, "use_normal", use_normal, 0);
      current_statement__ = 48;
      current_statement__ = 48;
      check_less_or_equal(function__, "use_normal", use_normal, 1);
      current_statement__ = 49;
      context__.validate_dims("data initialization","a_alpha","double",
          context__.to_vec());
      a_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 49;
      a_alpha = context__.vals_r("a_alpha")[(1 - 1)];
      current_statement__ = 50;
      context__.validate_dims("data initialization","b_alpha","double",
          context__.to_vec());
      b_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 50;
      b_alpha = context__.vals_r("b_alpha")[(1 - 1)];
      current_statement__ = 51;
      context__.validate_dims("data initialization","a_w","double",
          context__.to_vec());
      a_w = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 51;
      a_w = context__.vals_r("a_w")[(1 - 1)];
      current_statement__ = 52;
      context__.validate_dims("data initialization","b_w","double",
          context__.to_vec());
      b_w = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 52;
      b_w = context__.vals_r("b_w")[(1 - 1)];
      current_statement__ = 53;
      context__.validate_dims("data initialization","t_df","int",
          context__.to_vec());
      t_df = std::numeric_limits<int>::min();
      
      current_statement__ = 53;
      t_df = context__.vals_i("t_df")[(1 - 1)];
      current_statement__ = 53;
      current_statement__ = 53;
      check_greater_or_equal(function__, "t_df", t_df, 0);
      current_statement__ = 54;
      validate_non_negative_index("alpha", "nummodelledrates",
                                  nummodelledrates);
      current_statement__ = 55;
      validate_non_negative_index("rates", "nummodelledrates",
                                  nummodelledrates);
      current_statement__ = 56;
      modelled_ages_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 56;
      modelled_ages_1dim__ = (nummodelledrates + 1);
      current_statement__ = 56;
      validate_non_negative_index("modelled_ages", "nummodelledrates + 1",
                                  modelled_ages_1dim__);
      current_statement__ = 57;
      validate_non_negative_index("interpolated_ages", "numdets", numdets);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += nummodelledrates;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_bacon_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      local_scalar_t__ memory;
      memory = DUMMY_VAR__;
      
      current_statement__ = 1;
      memory = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        memory = stan::math::lub_constrain(memory, 0, 1, lp__);
      } else {
        current_statement__ = 1;
        memory = stan::math::lub_constrain(memory, 0, 1);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha;
      alpha = Eigen::Matrix<local_scalar_t__, -1, 1>(nummodelledrates);
      stan::math::fill(alpha, DUMMY_VAR__);
      
      current_statement__ = 2;
      alpha = in__.vector(nummodelledrates);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= nummodelledrates; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha[(sym1__ - 1)], 0, lp__),
            "assigning variable alpha");
        } else {
          current_statement__ = 2;
          assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha[(sym1__ - 1)], 0),
            "assigning variable alpha");
        }}
      local_scalar_t__ min_age;
      min_age = DUMMY_VAR__;
      
      current_statement__ = 3;
      min_age = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        min_age = stan::math::lb_constrain(min_age, 0, lp__);
      } else {
        current_statement__ = 3;
        min_age = stan::math::lb_constrain(min_age, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> rates;
      rates = Eigen::Matrix<local_scalar_t__, -1, 1>(nummodelledrates);
      stan::math::fill(rates, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> modelled_ages;
      modelled_ages = Eigen::Matrix<local_scalar_t__, -1, 1>(modelled_ages_1dim__);
      stan::math::fill(modelled_ages, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> interpolated_ages;
      interpolated_ages = Eigen::Matrix<local_scalar_t__, -1, 1>(numdets);
      stan::math::fill(interpolated_ages, DUMMY_VAR__);
      
      current_statement__ = 7;
      assign(rates, cons_list(index_uni(1), nil_index_list()),
        alpha[(1 - 1)], "assigning variable rates");
      current_statement__ = 10;
      for (int i = 2; i <= nummodelledrates; ++i) {
        current_statement__ = 8;
        assign(rates, cons_list(index_uni(i), nil_index_list()),
          ((memory * rates[((i - 1) - 1)]) + ((1 - memory) * alpha[(i - 1)])),
          "assigning variable rates");}
      current_statement__ = 11;
      assign(modelled_ages, cons_list(index_uni(1), nil_index_list()),
        min_age, "assigning variable modelled_ages");
      current_statement__ = 17;
      for (int i = 2; i <= (nummodelledrates + 1); ++i) {
        current_statement__ = 12;
        assign(modelled_ages, cons_list(index_uni(i), nil_index_list()),
          min_age, "assigning variable modelled_ages");
        current_statement__ = 15;
        for (int j = 1; j <= (i - 1); ++j) {
          current_statement__ = 13;
          assign(modelled_ages, cons_list(index_uni(i), nil_index_list()),
            (modelled_ages[(i - 1)] + (rates[(j - 1)] * depth_difference)),
            "assigning variable modelled_ages");}}
      current_statement__ = 28;
      for (int i = 1; i <= numdets; ++i) {
        current_statement__ = 18;
        assign(interpolated_ages, cons_list(index_uni(i), nil_index_list()),
          min_age, "assigning variable interpolated_ages");
        current_statement__ = 26;
        for (int j = 2; j <= (nummodelledrates + 1); ++j) {
          current_statement__ = 24;
          if (logical_lte(model_depths[(j - 1)], det_depths[(i - 1)])) {
            current_statement__ = 22;
            assign(interpolated_ages,
              cons_list(index_uni(i), nil_index_list()),
              (interpolated_ages[(i - 1)] +
                (depth_difference * rates[((j - 1) - 1)])),
              "assigning variable interpolated_ages");
          } else {
            current_statement__ = 19;
            assign(interpolated_ages,
              cons_list(index_uni(i), nil_index_list()),
              (interpolated_ages[(i - 1)] +
                ((det_depths[(i - 1)] - model_depths[((j - 1) - 1)]) *
                  rates[((j - 1) - 1)])),
              "assigning variable interpolated_ages");
            break;
          }}}
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= nummodelledrates; ++sym1__) {
        current_statement__ = 4;
        current_statement__ = 4;
        check_greater_or_equal(function__, "rates[sym1__]",
                               rates[(sym1__ - 1)], 0);}
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= modelled_ages_1dim__; ++sym1__) {
        current_statement__ = 5;
        current_statement__ = 5;
        check_greater_or_equal(function__, "modelled_ages[sym1__]",
                               modelled_ages[(sym1__ - 1)], 0);}
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= numdets; ++sym1__) {
        current_statement__ = 6;
        current_statement__ = 6;
        check_greater_or_equal(function__, "interpolated_ages[sym1__]",
                               interpolated_ages[(sym1__ - 1)], 0);}
      {
        current_statement__ = 33;
        if (logical_eq(use_normal, 1)) {
          current_statement__ = 31;
          lp_accum__.add(
            normal_lpdf<propto__>(
              rvalue(det_ages,
                cons_list(index_min_max(1, numdets), nil_index_list()),
                "det_ages"),
              rvalue(interpolated_ages,
                cons_list(index_min_max(1, numdets), nil_index_list()),
                "interpolated_ages"),
              rvalue(det_sd,
                cons_list(index_min_max(1, numdets), nil_index_list()),
                "det_sd")));
        } else {
          current_statement__ = 29;
          lp_accum__.add(
            student_t_lpdf<propto__>(
              rvalue(det_ages,
                cons_list(index_min_max(1, numdets), nil_index_list()),
                "det_ages"), t_df,
              rvalue(interpolated_ages,
                cons_list(index_min_max(1, numdets), nil_index_list()),
                "interpolated_ages"),
              rvalue(det_sd,
                cons_list(index_min_max(1, numdets), nil_index_list()),
                "det_sd")));
        }
        current_statement__ = 34;
        lp_accum__.add(
          normal_lpdf<propto__>(min_age, det_ages[(1 - 1)], det_sd[(1 - 1)]));
        current_statement__ = 35;
        lp_accum__.add(beta_lpdf<propto__>(memory, a_w, b_w));
        current_statement__ = 36;
        lp_accum__.add(
          gamma_lpdf<propto__>(
            rvalue(alpha,
              cons_list(index_min_max(1, nummodelledrates), nil_index_list()),
              "alpha"), a_alpha, b_alpha));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_bacon_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      double memory;
      memory = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      memory = in__.scalar();
      current_statement__ = 1;
      memory = stan::math::lub_constrain(memory, 0, 1);
      Eigen::Matrix<double, -1, 1> alpha;
      alpha = Eigen::Matrix<double, -1, 1>(nummodelledrates);
      stan::math::fill(alpha, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      alpha = in__.vector(nummodelledrates);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= nummodelledrates; ++sym1__) {
        current_statement__ = 2;
        assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(alpha[(sym1__ - 1)], 0),
          "assigning variable alpha");}
      double min_age;
      min_age = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      min_age = in__.scalar();
      current_statement__ = 3;
      min_age = stan::math::lb_constrain(min_age, 0);
      Eigen::Matrix<double, -1, 1> rates;
      rates = Eigen::Matrix<double, -1, 1>(nummodelledrates);
      stan::math::fill(rates, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> modelled_ages;
      modelled_ages = Eigen::Matrix<double, -1, 1>(modelled_ages_1dim__);
      stan::math::fill(modelled_ages, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> interpolated_ages;
      interpolated_ages = Eigen::Matrix<double, -1, 1>(numdets);
      stan::math::fill(interpolated_ages, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(memory);
      for (int sym1__ = 1; sym1__ <= nummodelledrates; ++sym1__) {
        vars__.emplace_back(alpha[(sym1__ - 1)]);}
      vars__.emplace_back(min_age);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 7;
      assign(rates, cons_list(index_uni(1), nil_index_list()),
        alpha[(1 - 1)], "assigning variable rates");
      current_statement__ = 10;
      for (int i = 2; i <= nummodelledrates; ++i) {
        current_statement__ = 8;
        assign(rates, cons_list(index_uni(i), nil_index_list()),
          ((memory * rates[((i - 1) - 1)]) + ((1 - memory) * alpha[(i - 1)])),
          "assigning variable rates");}
      current_statement__ = 11;
      assign(modelled_ages, cons_list(index_uni(1), nil_index_list()),
        min_age, "assigning variable modelled_ages");
      current_statement__ = 17;
      for (int i = 2; i <= (nummodelledrates + 1); ++i) {
        current_statement__ = 12;
        assign(modelled_ages, cons_list(index_uni(i), nil_index_list()),
          min_age, "assigning variable modelled_ages");
        current_statement__ = 15;
        for (int j = 1; j <= (i - 1); ++j) {
          current_statement__ = 13;
          assign(modelled_ages, cons_list(index_uni(i), nil_index_list()),
            (modelled_ages[(i - 1)] + (rates[(j - 1)] * depth_difference)),
            "assigning variable modelled_ages");}}
      current_statement__ = 28;
      for (int i = 1; i <= numdets; ++i) {
        current_statement__ = 18;
        assign(interpolated_ages, cons_list(index_uni(i), nil_index_list()),
          min_age, "assigning variable interpolated_ages");
        current_statement__ = 26;
        for (int j = 2; j <= (nummodelledrates + 1); ++j) {
          current_statement__ = 24;
          if (logical_lte(model_depths[(j - 1)], det_depths[(i - 1)])) {
            current_statement__ = 22;
            assign(interpolated_ages,
              cons_list(index_uni(i), nil_index_list()),
              (interpolated_ages[(i - 1)] +
                (depth_difference * rates[((j - 1) - 1)])),
              "assigning variable interpolated_ages");
          } else {
            current_statement__ = 19;
            assign(interpolated_ages,
              cons_list(index_uni(i), nil_index_list()),
              (interpolated_ages[(i - 1)] +
                ((det_depths[(i - 1)] - model_depths[((j - 1) - 1)]) *
                  rates[((j - 1) - 1)])),
              "assigning variable interpolated_ages");
            break;
          }}}
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= nummodelledrates; ++sym1__) {
        current_statement__ = 4;
        current_statement__ = 4;
        check_greater_or_equal(function__, "rates[sym1__]",
                               rates[(sym1__ - 1)], 0);}
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= modelled_ages_1dim__; ++sym1__) {
        current_statement__ = 5;
        current_statement__ = 5;
        check_greater_or_equal(function__, "modelled_ages[sym1__]",
                               modelled_ages[(sym1__ - 1)], 0);}
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= numdets; ++sym1__) {
        current_statement__ = 6;
        current_statement__ = 6;
        check_greater_or_equal(function__, "interpolated_ages[sym1__]",
                               interpolated_ages[(sym1__ - 1)], 0);}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= nummodelledrates; ++sym1__) {
          vars__.emplace_back(rates[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= modelled_ages_1dim__; ++sym1__) {
          vars__.emplace_back(modelled_ages[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numdets; ++sym1__) {
          vars__.emplace_back(interpolated_ages[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double memory;
      memory = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      memory = context__.vals_r("memory")[(1 - 1)];
      double memory_free__;
      memory_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      memory_free__ = stan::math::lub_free(memory, 0, 1);
      Eigen::Matrix<double, -1, 1> alpha;
      alpha = Eigen::Matrix<double, -1, 1>(nummodelledrates);
      stan::math::fill(alpha, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 2;
        assign(alpha_flat__, nil_index_list(), context__.vals_r("alpha"),
          "assigning variable alpha_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= nummodelledrates; ++sym1__) {
          current_statement__ = 2;
          assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
            alpha_flat__[(pos__ - 1)], "assigning variable alpha");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> alpha_free__;
      alpha_free__ = Eigen::Matrix<double, -1, 1>(nummodelledrates);
      stan::math::fill(alpha_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= nummodelledrates; ++sym1__) {
        current_statement__ = 2;
        assign(alpha_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(alpha[(sym1__ - 1)], 0),
          "assigning variable alpha_free__");}
      double min_age;
      min_age = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      min_age = context__.vals_r("min_age")[(1 - 1)];
      double min_age_free__;
      min_age_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      min_age_free__ = stan::math::lb_free(min_age, 0);
      vars__.emplace_back(memory_free__);
      for (int sym1__ = 1; sym1__ <= nummodelledrates; ++sym1__) {
        vars__.emplace_back(alpha_free__[(sym1__ - 1)]);}
      vars__.emplace_back(min_age_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("memory");
    names__.emplace_back("alpha");
    names__.emplace_back("min_age");
    names__.emplace_back("rates");
    names__.emplace_back("modelled_ages");
    names__.emplace_back("interpolated_ages");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(nummodelledrates)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(nummodelledrates)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(modelled_ages_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numdets)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "memory");
    for (int sym1__ = 1; sym1__ <= nummodelledrates; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "min_age");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= nummodelledrates; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "rates" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= modelled_ages_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "modelled_ages" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numdets; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "interpolated_ages" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "memory");
    for (int sym1__ = 1; sym1__ <= nummodelledrates; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "min_age");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= nummodelledrates; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "rates" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= modelled_ages_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "modelled_ages" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numdets; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "interpolated_ages" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"memory\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" << nummodelledrates << "},\"block\":\"parameters\"},{\"name\":\"min_age\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rates\",\"type\":{\"name\":\"vector\",\"length\":" << nummodelledrates << "},\"block\":\"transformed_parameters\"},{\"name\":\"modelled_ages\",\"type\":{\"name\":\"vector\",\"length\":" << modelled_ages_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"interpolated_ages\",\"type\":{\"name\":\"vector\",\"length\":" << numdets << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"memory\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" << nummodelledrates << "},\"block\":\"parameters\"},{\"name\":\"min_age\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rates\",\"type\":{\"name\":\"vector\",\"length\":" << nummodelledrates << "},\"block\":\"transformed_parameters\"},{\"name\":\"modelled_ages\",\"type\":{\"name\":\"vector\",\"length\":" << modelled_ages_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"interpolated_ages\",\"type\":{\"name\":\"vector\",\"length\":" << numdets << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_bacon_namespace::model_bacon;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_bacon_namespace::profiles__;
}
#endif
#endif
