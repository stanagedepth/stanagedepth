// Generated by rstantools.  Do not edit by hand.

/*
    stanagedepth is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    stanagedepth is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with stanagedepth.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_uniformactualdistributions_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 98, column 2 to column 12)",
                                                      " (in 'string', line 100, column 2 to column 17)",
                                                      " (in 'string', line 103, column 2 to column 34)",
                                                      " (in 'string', line 105, column 2 to column 30)",
                                                      " (in 'string', line 107, column 4 to column 74)",
                                                      " (in 'string', line 106, column 24 to line 108, column 3)",
                                                      " (in 'string', line 106, column 2 to line 108, column 3)",
                                                      " (in 'string', line 111, column 2 to column 48)",
                                                      " (in 'string', line 113, column 4 to column 56)",
                                                      " (in 'string', line 112, column 24 to line 114, column 3)",
                                                      " (in 'string', line 112, column 2 to line 114, column 3)",
                                                      " (in 'string', line 86, column 2 to column 25)",
                                                      " (in 'string', line 87, column 2 to column 25)",
                                                      " (in 'string', line 88, column 25 to column 34)",
                                                      " (in 'string', line 88, column 9 to column 18)",
                                                      " (in 'string', line 88, column 2 to column 36)",
                                                      " (in 'string', line 89, column 26 to column 35)",
                                                      " (in 'string', line 89, column 9 to column 18)",
                                                      " (in 'string', line 89, column 2 to column 37)",
                                                      " (in 'string', line 90, column 9 to column 18)",
                                                      " (in 'string', line 90, column 2 to column 26)",
                                                      " (in 'string', line 92, column 2 to column 29)",
                                                      " (in 'string', line 93, column 9 to column 22)",
                                                      " (in 'string', line 93, column 2 to column 40)",
                                                      " (in 'string', line 94, column 9 to column 22)",
                                                      " (in 'string', line 94, column 2 to column 33)",
                                                      " (in 'string', line 95, column 9 to column 22)",
                                                      " (in 'string', line 95, column 2 to column 30)",
                                                      " (in 'string', line 103, column 10 to column 19)",
                                                      " (in 'string', line 6, column 4 to column 18)",
                                                      " (in 'string', line 7, column 4 to column 43)",
                                                      " (in 'string', line 8, column 4 to column 46)",
                                                      " (in 'string', line 9, column 4 to column 22)",
                                                      " (in 'string', line 11, column 4 to column 26)",
                                                      " (in 'string', line 12, column 4 to column 21)",
                                                      " (in 'string', line 13, column 4 to column 25)",
                                                      " (in 'string', line 15, column 59 to column 141)",
                                                      " (in 'string', line 15, column 4 to column 141)",
                                                      " (in 'string', line 29, column 10 to column 24)",
                                                      " (in 'string', line 28, column 15 to line 30, column 9)",
                                                      " (in 'string', line 27, column 10 to column 24)",
                                                      " (in 'string', line 26, column 49 to line 28, column 9)",
                                                      " (in 'string', line 26, column 15 to line 30, column 9)",
                                                      " (in 'string', line 24, column 10 to column 24)",
                                                      " (in 'string', line 25, column 10 to column 24)",
                                                      " (in 'string', line 23, column 42 to line 26, column 9)",
                                                      " (in 'string', line 23, column 8 to line 30, column 9)",
                                                      " (in 'string', line 31, column 50 to column 56)",
                                                      " (in 'string', line 31, column 8 to column 56)",
                                                      " (in 'string', line 32, column 8 to column 44)",
                                                      " (in 'string', line 33, column 8 to column 34)",
                                                      " (in 'string', line 22, column 18 to line 34, column 7)",
                                                      " (in 'string', line 22, column 6 to line 34, column 7)",
                                                      " (in 'string', line 21, column 11 to line 35, column 5)",
                                                      " (in 'string', line 20, column 6 to column 20)",
                                                      " (in 'string', line 19, column 45 to line 21, column 5)",
                                                      " (in 'string', line 19, column 11 to line 35, column 5)",
                                                      " (in 'string', line 18, column 6 to column 20)",
                                                      " (in 'string', line 17, column 37 to line 19, column 5)",
                                                      " (in 'string', line 17, column 4 to line 35, column 5)",
                                                      " (in 'string', line 40, column 6 to column 101)",
                                                      " (in 'string', line 41, column 6 to column 109)",
                                                      " (in 'string', line 42, column 6 to column 92)",
                                                      " (in 'string', line 39, column 11 to line 43, column 5)",
                                                      " (in 'string', line 37, column 6 to column 45)",
                                                      " (in 'string', line 38, column 6 to column 34)",
                                                      " (in 'string', line 36, column 23 to line 39, column 5)",
                                                      " (in 'string', line 36, column 4 to line 43, column 5)",
                                                      " (in 'string', line 45, column 4 to column 23)",
                                                      " (in 'string', line 3, column 70 to line 47, column 3)",
                                                      " (in 'string', line 51, column 11 to column 40)",
                                                      " (in 'string', line 51, column 4 to column 52)",
                                                      " (in 'string', line 52, column 4 to column 20)",
                                                      " (in 'string', line 56, column 8 to column 86)",
                                                      " (in 'string', line 53, column 4 to line 56, column 86)",
                                                      " (in 'string', line 58, column 4 to column 19)",
                                                      " (in 'string', line 61, column 6 to column 40)",
                                                      " (in 'string', line 62, column 6 to column 102)",
                                                      " (in 'string', line 60, column 46 to line 64, column 5)",
                                                      " (in 'string', line 60, column 4 to line 64, column 5)",
                                                      " (in 'string', line 71, column 4 to column 18)",
                                                      " (in 'string', line 48, column 113 to line 72, column 3)",
                                                      " (in 'string', line 74, column 4 to column 67)",
                                                      " (in 'string', line 73, column 57 to line 75, column 3)",
                                                      " (in 'string', line 82, column 4 to column 56)",
                                                      " (in 'string', line 77, column 82 to line 83, column 3)"};
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, stan::value_type_t<T1__>,
stan::value_type_t<T2__>>
binary_search(const T0__& search, const T1__& index_values_arg__,
              const T2__& output_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>>;
  const auto& index_values = to_ref(index_values_arg__);
  const auto& output = to_ref(output_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int lower;
    lower = std::numeric_limits<int>::min();
    
    current_statement__ = 30;
    lower = 1;
    int upper;
    upper = std::numeric_limits<int>::min();
    
    current_statement__ = 31;
    upper = num_elements(index_values);
    int index;
    index = std::numeric_limits<int>::min();
    
    current_statement__ = 32;
    index = (lower + ((upper - lower) / 2));
    int iteration;
    iteration = std::numeric_limits<int>::min();
    
    current_statement__ = 33;
    iteration = 0;
    local_scalar_t__ used_index_value;
    used_index_value = DUMMY_VAR__;
    
    local_scalar_t__ used_output;
    used_output = DUMMY_VAR__;
    
    local_scalar_t__ interp_fraction;
    interp_fraction = DUMMY_VAR__;
    
    current_statement__ = 38;
    if (logical_neq(num_elements(index_values), num_elements(output))) {
      current_statement__ = 37;
      std::stringstream errmsg_stream__;
      errmsg_stream__ << "Number of elements in index and output vectors unequal in binary_search";
      throw std::domain_error(errmsg_stream__.str());
    } 
    current_statement__ = 60;
    if (logical_gt(index_values[(lower - 1)], search)) {
      current_statement__ = 58;
      upper = lower;
    } else {
      current_statement__ = 57;
      if (logical_lt(index_values[(upper - 1)], search)) {
        current_statement__ = 55;
        lower = upper;
      } else {
        current_statement__ = 53;
        while (logical_eq(1, 1)) {
          current_statement__ = 47;
          if (logical_eq(index_values[(index - 1)], search)) {
            current_statement__ = 44;
            lower = index;
            current_statement__ = 45;
            upper = index;
          } else {
            current_statement__ = 43;
            if (logical_lt(index_values[(index - 1)], search)) {
              current_statement__ = 41;
              lower = index;
            } else {
              current_statement__ = 39;
              upper = index;
            }
          }
          current_statement__ = 49;
          if ((primitive_value(logical_lte((upper - lower), 1)) ||
              primitive_value(logical_gt(iteration, 50)))) {
            break;
          } 
          current_statement__ = 50;
          index = (lower + ((upper - lower) / 2));
          current_statement__ = 51;
          iteration = (iteration + 1);
        }
      }
    }
    current_statement__ = 68;
    if (logical_eq(upper, lower)) {
      current_statement__ = 65;
      used_index_value = index_values[(lower - 1)];
      current_statement__ = 66;
      used_output = output[(lower - 1)];
    } else {
      current_statement__ = 61;
      interp_fraction = ((search - index_values[(lower - 1)]) /
                          (index_values[(upper - 1)] -
                            index_values[(lower - 1)]));
      current_statement__ = 62;
      used_index_value = (((1 - interp_fraction) * index_values[(lower - 1)])
                           + (interp_fraction * index_values[(upper - 1)]));
      current_statement__ = 63;
      used_output = (((1 - interp_fraction) * output[(lower - 1)]) +
                      (interp_fraction * output[(upper - 1)]));
    }
    current_statement__ = 69;
    return used_output;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct binary_search_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, stan::value_type_t<T1__>,
stan::value_type_t<T2__>>
operator()(const T0__& search, const T1__& index_values, const T2__& output,
           std::ostream* pstream__)  const 
{
return binary_search(search, index_values, output, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>,
stan::value_type_t<T3__>,
stan::value_type_t<T4__>>, -1, -1>
calibrate(const T0__& measurement, const T1__& measurement_sd,
          const T2__& calibrated_ages_arg__, const T3__& c14_ages_arg__,
          const T4__& cc_sd_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>,
          stan::value_type_t<T4__>>;
  const auto& calibrated_ages = to_ref(calibrated_ages_arg__);
  const auto& c14_ages = to_ref(c14_ages_arg__);
  const auto& cc_sd = to_ref(cc_sd_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 71;
    validate_non_negative_index("output", "num_elements(calibrated_ages)",
                                num_elements(calibrated_ages));
    Eigen::Matrix<local_scalar_t__, -1, -1> output;
    output = Eigen::Matrix<local_scalar_t__, -1, -1>(num_elements(
                                                       calibrated_ages), 2);
    stan::math::fill(output, DUMMY_VAR__);
    
    local_scalar_t__ total_prob;
    total_prob = DUMMY_VAR__;
    
    current_statement__ = 75;
    if ((primitive_value((primitive_value(
        logical_neq(num_elements(calibrated_ages), num_elements(c14_ages)))
        || primitive_value(
        logical_neq(num_elements(calibrated_ages), num_elements(cc_sd))))) ||
        primitive_value(
        logical_neq(num_elements(c14_ages), num_elements(cc_sd))))) {
      current_statement__ = 74;
      std::stringstream errmsg_stream__;
      errmsg_stream__ << "Number of elements in index and output vectors unequal in calibrate";
      throw std::domain_error(errmsg_stream__.str());
    } 
    current_statement__ = 76;
    total_prob = 0;
    current_statement__ = 80;
    for (int i = 1; i <= num_elements(calibrated_ages); ++i) {
      current_statement__ = 77;
      assign(output,
        cons_list(index_uni(i), cons_list(index_uni(1), nil_index_list())),
        calibrated_ages[(i - 1)], "assigning variable output");
      current_statement__ = 78;
      assign(output,
        cons_list(index_uni(i), cons_list(index_uni(2), nil_index_list())),
        stan::math::exp(
          normal_lpdf<false>(c14_ages[(i - 1)], measurement,
            stan::math::sqrt(
              (pow(measurement_sd, 2) + pow(cc_sd[(i - 1)], 2))))),
        "assigning variable output");}
    current_statement__ = 81;
    return output;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct calibrate_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>,
stan::value_type_t<T3__>,
stan::value_type_t<T4__>>, -1, -1>
operator()(const T0__& measurement, const T1__& measurement_sd,
           const T2__& calibrated_ages, const T3__& c14_ages,
           const T4__& cc_sd, std::ostream* pstream__)  const 
{
return calibrate(measurement, measurement_sd, calibrated_ages, c14_ages,
         cc_sd, pstream__);
}
};
template <bool propto__, typename T0__, typename T1__>
stan::promote_args_t<T0__,
stan::value_type_t<T1__>>
calibrated_age2_lpdf(const T0__& age, const T1__& calib_ages_arg__,
                     std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>>;
  const auto& calib_ages = to_ref(calib_ages_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 83;
    return stan::math::log(
             binary_search(age,
               rvalue(calib_ages,
                 cons_list(index_omni(),
                   cons_list(index_uni(1), nil_index_list())), "calib_ages"),
               rvalue(calib_ages,
                 cons_list(index_omni(),
                   cons_list(index_uni(2), nil_index_list())), "calib_ages"), pstream__));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct calibrated_age2_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__>
stan::promote_args_t<T0__,
stan::value_type_t<T1__>>
operator()(const T0__& age, const T1__& calib_ages, std::ostream* pstream__)  const 
{
return calibrated_age2_lpdf<propto__>(age, calib_ages, pstream__);
}
};
template <bool propto__, typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, stan::value_type_t<T1__>,
stan::value_type_t<T2__>>
calibrated_age_lpdf(const T0__& age, const T1__& ages_arg__,
                    const T2__& probabilities_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>>;
  const auto& ages = to_ref(ages_arg__);
  const auto& probabilities = to_ref(probabilities_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 85;
    return stan::math::log(
             binary_search(age, ages, probabilities, pstream__));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct calibrated_age_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, stan::value_type_t<T1__>,
stan::value_type_t<T2__>>
operator()(const T0__& age, const T1__& ages, const T2__& probabilities,
           std::ostream* pstream__)  const 
{
return calibrated_age_lpdf<propto__>(age, ages, probabilities, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_uniformactualdistributions final : public model_base_crtp<model_uniformactualdistributions> {
private:
  int num_dates;
  int num_probs;
  std::vector<Eigen::Matrix<double, -1, 1>> ages;
  std::vector<Eigen::Matrix<double, -1, 1>> probs;
  Eigen::Matrix<double, -1, 1> depth;
  int calcurve_size;
  Eigen::Matrix<double, -1, 1> calibrated_ages;
  Eigen::Matrix<double, -1, 1> c14_ages;
  Eigen::Matrix<double, -1, 1> cc_sd;
 
public:
  ~model_uniformactualdistributions() { }
  
  inline std::string model_name() const final { return "model_uniformactualdistributions"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_uniformactualdistributions(stan::io::var_context& context__,
                                   unsigned int random_seed__ = 0,
                                   std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_uniformactualdistributions_namespace::model_uniformactualdistributions";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 12;
      context__.validate_dims("data initialization","num_dates","int",
          context__.to_vec());
      num_dates = std::numeric_limits<int>::min();
      
      current_statement__ = 12;
      num_dates = context__.vals_i("num_dates")[(1 - 1)];
      current_statement__ = 12;
      current_statement__ = 12;
      check_greater_or_equal(function__, "num_dates", num_dates, 1);
      current_statement__ = 13;
      context__.validate_dims("data initialization","num_probs","int",
          context__.to_vec());
      num_probs = std::numeric_limits<int>::min();
      
      current_statement__ = 13;
      num_probs = context__.vals_i("num_probs")[(1 - 1)];
      current_statement__ = 13;
      current_statement__ = 13;
      check_greater_or_equal(function__, "num_probs", num_probs, 1);
      current_statement__ = 14;
      validate_non_negative_index("ages", "num_dates", num_dates);
      current_statement__ = 15;
      validate_non_negative_index("ages", "num_probs", num_probs);
      current_statement__ = 16;
      context__.validate_dims("data initialization","ages","double",
          context__.to_vec(num_dates, num_probs));
      ages = std::vector<Eigen::Matrix<double, -1, 1>>(num_dates, Eigen::Matrix<double, -1, 1>(num_probs));
      stan::math::fill(ages, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> ages_flat__;
        current_statement__ = 16;
        assign(ages_flat__, nil_index_list(), context__.vals_r("ages"),
          "assigning variable ages_flat__");
        current_statement__ = 16;
        pos__ = 1;
        current_statement__ = 16;
        for (int sym1__ = 1; sym1__ <= num_probs; ++sym1__) {
          current_statement__ = 16;
          for (int sym2__ = 1; sym2__ <= num_dates; ++sym2__) {
            current_statement__ = 16;
            assign(ages,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              ages_flat__[(pos__ - 1)], "assigning variable ages");
            current_statement__ = 16;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 17;
      validate_non_negative_index("probs", "num_dates", num_dates);
      current_statement__ = 18;
      validate_non_negative_index("probs", "num_probs", num_probs);
      current_statement__ = 19;
      context__.validate_dims("data initialization","probs","double",
          context__.to_vec(num_dates, num_probs));
      probs = std::vector<Eigen::Matrix<double, -1, 1>>(num_dates, Eigen::Matrix<double, -1, 1>(num_probs));
      stan::math::fill(probs, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> probs_flat__;
        current_statement__ = 19;
        assign(probs_flat__, nil_index_list(), context__.vals_r("probs"),
          "assigning variable probs_flat__");
        current_statement__ = 19;
        pos__ = 1;
        current_statement__ = 19;
        for (int sym1__ = 1; sym1__ <= num_probs; ++sym1__) {
          current_statement__ = 19;
          for (int sym2__ = 1; sym2__ <= num_dates; ++sym2__) {
            current_statement__ = 19;
            assign(probs,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              probs_flat__[(pos__ - 1)], "assigning variable probs");
            current_statement__ = 19;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 20;
      validate_non_negative_index("depth", "num_dates", num_dates);
      current_statement__ = 21;
      context__.validate_dims("data initialization","depth","double",
          context__.to_vec(num_dates));
      depth = Eigen::Matrix<double, -1, 1>(num_dates);
      stan::math::fill(depth, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> depth_flat__;
        current_statement__ = 21;
        assign(depth_flat__, nil_index_list(), context__.vals_r("depth"),
          "assigning variable depth_flat__");
        current_statement__ = 21;
        pos__ = 1;
        current_statement__ = 21;
        for (int sym1__ = 1; sym1__ <= num_dates; ++sym1__) {
          current_statement__ = 21;
          assign(depth, cons_list(index_uni(sym1__), nil_index_list()),
            depth_flat__[(pos__ - 1)], "assigning variable depth");
          current_statement__ = 21;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 22;
      context__.validate_dims("data initialization","calcurve_size","int",
          context__.to_vec());
      calcurve_size = std::numeric_limits<int>::min();
      
      current_statement__ = 22;
      calcurve_size = context__.vals_i("calcurve_size")[(1 - 1)];
      current_statement__ = 22;
      current_statement__ = 22;
      check_greater_or_equal(function__, "calcurve_size", calcurve_size, 1);
      current_statement__ = 23;
      validate_non_negative_index("calibrated_ages", "calcurve_size",
                                  calcurve_size);
      current_statement__ = 24;
      context__.validate_dims("data initialization","calibrated_ages",
          "double",context__.to_vec(calcurve_size));
      calibrated_ages = Eigen::Matrix<double, -1, 1>(calcurve_size);
      stan::math::fill(calibrated_ages, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> calibrated_ages_flat__;
        current_statement__ = 24;
        assign(calibrated_ages_flat__, nil_index_list(),
          context__.vals_r("calibrated_ages"),
          "assigning variable calibrated_ages_flat__");
        current_statement__ = 24;
        pos__ = 1;
        current_statement__ = 24;
        for (int sym1__ = 1; sym1__ <= calcurve_size; ++sym1__) {
          current_statement__ = 24;
          assign(calibrated_ages,
            cons_list(index_uni(sym1__), nil_index_list()),
            calibrated_ages_flat__[(pos__ - 1)],
            "assigning variable calibrated_ages");
          current_statement__ = 24;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 25;
      validate_non_negative_index("c14_ages", "calcurve_size", calcurve_size);
      current_statement__ = 26;
      context__.validate_dims("data initialization","c14_ages","double",
          context__.to_vec(calcurve_size));
      c14_ages = Eigen::Matrix<double, -1, 1>(calcurve_size);
      stan::math::fill(c14_ages, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> c14_ages_flat__;
        current_statement__ = 26;
        assign(c14_ages_flat__, nil_index_list(),
          context__.vals_r("c14_ages"), "assigning variable c14_ages_flat__");
        current_statement__ = 26;
        pos__ = 1;
        current_statement__ = 26;
        for (int sym1__ = 1; sym1__ <= calcurve_size; ++sym1__) {
          current_statement__ = 26;
          assign(c14_ages, cons_list(index_uni(sym1__), nil_index_list()),
            c14_ages_flat__[(pos__ - 1)], "assigning variable c14_ages");
          current_statement__ = 26;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 27;
      validate_non_negative_index("cc_sd", "calcurve_size", calcurve_size);
      current_statement__ = 28;
      context__.validate_dims("data initialization","cc_sd","double",
          context__.to_vec(calcurve_size));
      cc_sd = Eigen::Matrix<double, -1, 1>(calcurve_size);
      stan::math::fill(cc_sd, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> cc_sd_flat__;
        current_statement__ = 28;
        assign(cc_sd_flat__, nil_index_list(), context__.vals_r("cc_sd"),
          "assigning variable cc_sd_flat__");
        current_statement__ = 28;
        pos__ = 1;
        current_statement__ = 28;
        for (int sym1__ = 1; sym1__ <= calcurve_size; ++sym1__) {
          current_statement__ = 28;
          assign(cc_sd, cons_list(index_uni(sym1__), nil_index_list()),
            cc_sd_flat__[(pos__ - 1)], "assigning variable cc_sd");
          current_statement__ = 28;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 29;
      validate_non_negative_index("modelled_age", "num_dates", num_dates);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_uniformactualdistributions_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      local_scalar_t__ rate;
      rate = DUMMY_VAR__;
      
      current_statement__ = 1;
      rate = in__.scalar();
      local_scalar_t__ first_age;
      first_age = DUMMY_VAR__;
      
      current_statement__ = 2;
      first_age = in__.scalar();
      Eigen::Matrix<local_scalar_t__, -1, 1> modelled_age;
      modelled_age = Eigen::Matrix<local_scalar_t__, -1, 1>(num_dates);
      stan::math::fill(modelled_age, DUMMY_VAR__);
      
      current_statement__ = 4;
      assign(modelled_age, cons_list(index_uni(1), nil_index_list()),
        first_age, "assigning variable modelled_age");
      current_statement__ = 7;
      for (int i = 2; i <= num_dates; ++i) {
        current_statement__ = 5;
        assign(modelled_age, cons_list(index_uni(i), nil_index_list()),
          (modelled_age[((i - 1) - 1)] +
            (rate * (depth[(i - 1)] - depth[((i - 1) - 1)]))),
          "assigning variable modelled_age");}
      current_statement__ = 3;
      current_statement__ = 3;
      check_ordered(function__, "modelled_age", modelled_age);
      {
        current_statement__ = 8;
        lp_accum__.add(
          calibrated_age_lpdf<propto__>(first_age, ages[(1 - 1)],
            probs[(1 - 1)], pstream__));
        current_statement__ = 11;
        for (int i = 1; i <= num_dates; ++i) {
          current_statement__ = 9;
          lp_accum__.add(
            calibrated_age_lpdf<propto__>(modelled_age[(i - 1)],
              ages[(i - 1)], probs[(i - 1)], pstream__));}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_uniformactualdistributions_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      double rate;
      rate = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      rate = in__.scalar();
      double first_age;
      first_age = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      first_age = in__.scalar();
      Eigen::Matrix<double, -1, 1> modelled_age;
      modelled_age = Eigen::Matrix<double, -1, 1>(num_dates);
      stan::math::fill(modelled_age, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(rate);
      vars__.emplace_back(first_age);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 4;
      assign(modelled_age, cons_list(index_uni(1), nil_index_list()),
        first_age, "assigning variable modelled_age");
      current_statement__ = 7;
      for (int i = 2; i <= num_dates; ++i) {
        current_statement__ = 5;
        assign(modelled_age, cons_list(index_uni(i), nil_index_list()),
          (modelled_age[((i - 1) - 1)] +
            (rate * (depth[(i - 1)] - depth[((i - 1) - 1)]))),
          "assigning variable modelled_age");}
      current_statement__ = 3;
      current_statement__ = 3;
      check_ordered(function__, "modelled_age", modelled_age);
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= num_dates; ++sym1__) {
          vars__.emplace_back(modelled_age[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double rate;
      rate = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      rate = context__.vals_r("rate")[(1 - 1)];
      double first_age;
      first_age = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      first_age = context__.vals_r("first_age")[(1 - 1)];
      vars__.emplace_back(rate);
      vars__.emplace_back(first_age);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("rate");
    names__.emplace_back("first_age");
    names__.emplace_back("modelled_age");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(num_dates)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "rate");
    param_names__.emplace_back(std::string() + "first_age");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= num_dates; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "modelled_age" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "rate");
    param_names__.emplace_back(std::string() + "first_age");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= num_dates; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "modelled_age" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"rate\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"first_age\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"modelled_age\",\"type\":{\"name\":\"vector\",\"length\":" << num_dates << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"rate\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"first_age\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"modelled_age\",\"type\":{\"name\":\"vector\",\"length\":" << num_dates << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_uniformactualdistributions_namespace::model_uniformactualdistributions;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_uniformactualdistributions_namespace::profiles__;
}
#endif
#endif
